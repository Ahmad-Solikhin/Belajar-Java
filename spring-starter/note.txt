Multi-architecture pattern
- Presentation layer
  Layer paling depan yang berdekatan dengan user, bertugas menampilkan hasil operasi maupun menerima data daru pengguna.
  Kalo di java bisa json maupun thymleaf

- Business layer
  Menangani bisnis proses dari aplikasi

- Persistence layer
  Untuk menjembatani proses penyimpanan, update, hingga mengambil data dari database layer

- Database layer
  Bisa dikatakan terpisah, namun nantinya akan direpresentasikan dalam sebuah class


Konfigurasi pada ddl auto
- None, tidak akan ada aksi ddl
- Validate, dimana hanya akan melakukan validasi pada model yang dibuat
- Update, Melakukan update ddl, seperti melakukan update kolom dan tabel menggunakan model yang telah dibuat
- create, akan dibuat database baru dengan melakukan drop database sebelumnya
- create-drop, dimana akan membuat database baru setiap aplikasi jalan, dan akan di drop jika aplikasi berhenti

Package domain sama aja kayak package entity

Jika menggunakan JPA bisa menggunakan name convertion
Misal menggunakan findBy+namaKeyword

Jika menggunakan strategy identity maka akan lebih bagus jika input satu persatu
Jika menggunakan strategy sequence bisa menggunakan metode batch insert sehingga akan lebih cepat

Dalam update menggunakan JPA akan dilakukan pengecekan semua kolom, namun hal ini akan sangat memakan performance jika kolom nya banyak
Untuk mengatasi ini bisa ditamahkan pada kelas domain berupa @DynamicUpdate
Dengan menggunakan DynamicUpdate akan meningkatkan performa aplikasi jika kolomnya banyak
Tapi kerugiannya adalah jika kolomnya sedikit maka akan turun performanya karena akan mematikan caching

Untuk menggunakan strategy sequence ada catatan, dimana lebih dari satu table menggunakan satu sequence secara bersamaan
Sehingga ini mengakibatkan sequence tidak berurut nantinya
Agar setiap table memiliki squence yang unik bisa ditambahkan konfigurasi annotation @SequenceGenerator(name = "nama_generator", sequenceName = "nama_PK_seq")
Dan pada @GeneratedValue() tambahkan generator = "nama_generator"

Pada relasi bisa ditambahkan annotation yang sesuai :
- @OneToOne
- @OneToMany
Setelah itu diberikan annotation @JoinColumn(name = "nama_relasi", nullable = false)

Best practice dalam id adalah menggunakan UUID karena id yg autoincrement dapat mudah ditebak

Best practice jika terdapat kolom yang sama antar tiap entity bisa dilakukan dengan cara membuat class parent yang nantinya akan di akses

--------------------------------------------
AOP (Aspect Oriented Programming)
Aop adalah potongan code yang akan dieksekusi oleh framework
Bertujuan untuk meningkatkan modularitas dari sebuah framework
Dengan menggunakan aop ada keuntungan :
- Logic akan berada dalam 1 tempat
- Modul service akan menjadi lebih bersih

Fitur yang dapat dilakukan menggunakan AOP :
- logging
- validation
- caching
- security
- I18N

Aspect terdiri dari
- Aspect : code yang akan dieksekusi
- Advice : kapan aplikasi akan mengeksekusi aspect
- Poincut : method mana yang harus menjalankan aspect
- Join points : event yang mentrigger aspect
- Target Object : Tertuju pada bean pada container

Pointcut Designator
- execution, untuk mencocokan method yang dijadikan sebagai joint point
- within, membatasi kriteria joint point dengan tipe yang ditentukan
- args, untuk mencocokan joint point dengan args yg diberikan, dan tidak stand alone
- @args, membatasi dimana tipe kelas menggu7nakan annotation yg telah ditentukan
- @annotation, ini kyk @args cuma dia bisa stand alone dan nyari yg semua pake annotation itu

Advice
- Before, dijalankan sebelum method
- After, dijalankan setelah method
- AfterReturning, dijalankan sesudah join point return
- AfterReturning, dijalankan jika ada throw exception
- Around, gabungan after dan before

-----------------------------------------
Spring Security

Security Context adalah tempat dimana data user disimpan setelah user melakukan authentikasi

-----------------------------------------
Fetch dalam database relational, ini berfungsi untuk mengatur apakah akan langsung join table atau engga
- Eager, data yang ber relasional dengan tabel akan langsung diambil
- Lazy, data tidak akan langsung diambil

Untuk m - m dan one - m adalah lazy, untuk m - one dan one - one adalah eager

-----------------------------------------
Cascading
Merupakan operasi yang dilakukan oleh relasi setelah entity melakukan CUD
- PERSIST/ALL, jika ada relasi maka akan otomatis masuk juga datanya
- MERGE, Mirip persist namun hanya update bukan create
- REMOVE. Jika parent nya di delete maka child nya juga akan ikut di delete. Untuk melakukan hal ini harus dilakukan hard delete

-----------------------------------------
JPQL
Digunakan untuk melakukan query yang kompleks misal membutuhkan join dengan table lain
Jika menggunakan JPQL maka nama table itu ditulis sesuai dengan nama entity nya seperti Book bukan book

-----------------------------------------
JPA Projection
Mengambil data lintas entity atau domain yang nantinya akan masuk kedalam 1 object

-----------------------------------------
Filter dan Interceptor

Kalo filter digunakan untuk melakukan filter sebelum masuk ke dalam server dan disediakan oleh servelet server
Kalo interceptor itu ada di package spring mvc dan disediakan oleh spring

-----------------------------------------
Record DTO
Pada java 17 ada alternatif dari penggunaan @Data dengan menggunakan Record sebagai DTO

-----------------------------------------
JWT (Json Web Token)
handler berungsi untuk memberikan return apakah sukses atau gagal

-----------------------------------------
Swagger
Merupakan dokumentasi yang digunakan pada RESTful API dengan spesifikasi OpenAPI








